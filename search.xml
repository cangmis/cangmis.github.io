<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JSON入门学习]]></title>
    <url>%2F2019%2F08%2F31%2FJSON%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[##什么是JSON 是一种轻量级的数据交换格式。他基于 javascript 语法的子集，即数组和对象表示。 采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率. *客户端向服务器端发送请求后，服务器端怎么才能把用户需要的数据返回给客户端呢。这时我们就需要用一个指定的格式将数据，按照指定格式返回客户端。这时就有了两种数据传输的方式（XML和Json),在普通的Web应用中，不管是服务器端还是客户端解析XML代码会非常麻烦，所以这时Json就更加满足数据传输解析的要求。采用Json格式的方式进行数据的传输，不仅方便传输解析，还特别易于人阅读和编写 ##JSON的语法规则 数据由键(key),值(value)描述,由逗号分隔 大括号代表一个完整的对象,又有多个键/值对 中括号保存数组,多个对象之间使用逗号分割 #####注意:key和value如果是字符串的时候一定要有引号 ###JSON实例利用JSON存储员工信 JSON: [ { &quot;empno&quot;: 73652, &quot;ename&quot;: &quot;李宁&quot;, &quot;job&quot;: &quot;软件工程师&quot;, &quot;hiredate&quot;: &quot;2017-50-02&quot;, &quot;salary&quot;: 13000, &quot;dname&quot;: &quot;研发部&quot; }, { &quot;empno&quot;: 73652, &quot;ename&quot;: &quot;张三&quot;, &quot;job&quot;: &quot;软件工程师&quot;, &quot;hiredate&quot;: &quot;2017-50-02&quot;, &quot;salary&quot;: 13000, &quot;dname&quot;: &quot;研发部&quot;, &quot;customers&quot;: [ { &quot;cname&quot;: &quot;李东&quot; }, { &quot;canme&quot;: &quot;王五&quot; } ] } ] ###可以用JSON来代替xml ####xml &lt;student name=&quot;xiaoming&quot;&gt; &lt;sex&gt;female&lt;/sex&gt; &lt;age&gt;26&lt;/age&gt; &lt;/student&gt; ####替代后 [{“name”:”xiaoming”,”sex”:”female”,”age”:”26”}] ##javascripe访问JSON对象 ######JSON就相当于一个大数组,在javasripe中我们用访问数组的方式访问JSON就可以.一下是实例: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; json是一个数组里面有各个对象的信息 var json= [ { &quot;empno&quot;: 73652, &quot;ename&quot;: &quot;李宁&quot;, &quot;job&quot;: &quot;软件工程师&quot;, &quot;hiredate&quot;: &quot;2017-50-02&quot;, &quot;salary&quot;: 13000, &quot;dname&quot;: &quot;研发部&quot; }, { &quot;empno&quot;: 73652, &quot;ename&quot;: &quot;张三&quot;, &quot;job&quot;: &quot;软件工程师&quot;, &quot;hiredate&quot;: &quot;2017-50-02&quot;, &quot;salary&quot;: 13000, &quot;dname&quot;: &quot;研发部&quot;, &quot;customers&quot;: [ { &quot;cname&quot;: &quot;李东&quot; }, { &quot;cname&quot;: &quot;王五&quot; } ] } ]; for(var i=0;i&lt;json.length;i++) { var emp=json[i]; document.write(&quot;&lt;h1&gt;&quot;); document.write(emp.empno); document.write(&quot;,&quot;+emp.ename); document.write(&quot;,&quot;+emp.job); document.write(&quot;,&quot;+emp.hiredate); document.write(&quot;,&quot;+emp.salary); document.write(&quot;,&quot;+emp.dname); document.write(&quot;&lt;/h1&gt;&quot;); //访问嵌套的地方 if(emp.customers!=null){ document.write(&quot;&lt;h2&gt;---&quot;); for(var j=0;i&lt;emp.customers.length;j++) { var customer=emp.customers[j]; document.write(customer.cname); } document.write(&quot;&lt;/h2&gt;---&quot;); } } &lt;/script&gt; &lt;/head&gt; &lt;/body&gt; &lt;/html&gt; ##JSON与字符串的互相转换字符串转json：JSON.parse(字符串名)； json转字符串:JSON.stringify(JSON名) ####实例: string-&gt;json &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;字符串与JSON互相转换&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; var str=&quot;{\&quot;class_name\&quot;:\&quot;五年级三班\&quot;}&quot;;//字符串 var json=JSON.parse(str); console.log(str); console.log(json); &lt;/script&gt; &lt;/head&gt; &lt;/body&gt; &lt;/html&gt;json-&gt;string &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;字符串与JSON互相转换&lt;/title&gt; var json1={&quot;clssname&quot;:&quot;五年级四班&quot;}; var str1=JSON.stringify(json1); console.log(json1); console.log(str1); &lt;/script&gt; &lt;/head&gt; &lt;/body&gt; &lt;/html&gt;json初始化可以看做成创建一个对象 var json2={}; json2.class_name=”五年级5班”; json2.foor=”四层”; json2.teacher=”王一凡”; console.log(json2); ##JSON与java的交互 -java的JSON工具包还有FastJson,Jackson.Gson,Json-lib..-FastJson是阿里巴巴著名的JSON 序列化与反序列工具包-FastJson国内拥有大量的使用者,拥有Api简单,效率高等优点 JSON 逐渐替换了xml 成了保存传输的文件好工具 ###FastJSON的下载和安装:去github官网官网搜索fastjson :点 alibaba/fastjson,点Documentation下Documentation Home在下载和使用栏下下载最新版jar包下载后将其拖进eclipse工程下的WEB-INF下的lib文件夹中就可以使用了 ###FastJson对象序列化与反序列化和JSON注解 1.类转换成字符串：String json= JSON.toJSONString(employee); 2.字符串转换成类:Employee emp=JSON.parseObject(json,Employee.class); JSON的注释： JSON注释对下一行代码生效@JSONField(format=”yyyy-MM-dd “)设置日期格式@JSONField(serialize=false)//不将其进行序列化 Employee类: package com.json; import java.util.Date; import com.alibaba.fastjson.annotation.JSONField; public class Employee { private Integer empno; private String name; private String job; @JSONField(format=&quot;yyyy-MM-dd &quot;) private Date hdate; private Float salary; @JSONField(serialize=false)//不对dname进行序列化 private String dname; public Integer getEmpno() { return empno; } public void setEmpno(Integer empno) { this.empno = empno; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getJob() { return job; } public void setJob(String job) { this.job = job; } public Date getHdate() { return hdate; } public void setHdate(Date hdate) { this.hdate = hdate; } public Float getSalary() { return salary; } public void setSalary(Float salary) { this.salary = salary; } public String getDname() { return dname; } public void setDname(String dname) { this.dname = dname; } } import java.util.Calendar; import com.alibaba.fastjson.JSON; public class FastJson { public static void main(String[] args) { Employee employee= new Employee(); employee.setEmpno(4488); employee.setName(&quot;晓东&quot;); employee.setJob(&quot;客户经理&quot;); employee.setSalary(10000f); employee.setDname(&quot;市场部&quot;); Calendar c=Calendar.getInstance(); c.set(2019,0,30,0,0,0); employee.setHdate(c.getTime()); //FastJson中提供了JSON对象。完成对象与JSON字符串的相互转换 String json= JSON.toJSONString(employee); System.out.println(json); Employee emp=JSON.parseObject(json,Employee.class); System.out.println(emp.getName()); } } ###FastJSON对象数组序列化和反序列化 ###实例: 对象数组转为字符串:String json=JSON.toJSONString(emplist); 字符串再转回对象数组:List emps=JSON.parseArray(json,Employee.class); import java.util.ArrayList; import java.util.List; import com.alibaba.fastjson.JSON; public class FastJson2 { public static void main(String[] args) { List emplist= new ArrayList(); for(int i=0;i&lt;100;i++) { Employee employee=new Employee(); employee.setEmpno(4488+i); employee.setName(&quot;员工&quot;+i); emplist.add(employee); } String json=JSON.toJSONString(emplist); System.out.println(json); List&lt;Employee&gt; emps=JSON.parseArray(json,Employee.class); for(Employee e:emps) { System.out.println(e.getEmpno()+&quot;:&quot;+e.getName()); } } }]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>JAVAWEB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nexT的配置优化]]></title>
    <url>%2F2019%2F08%2F27%2FnexT%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[#写在前面 这是我的第一篇博客，我这个博客用的是用的比较广泛的nexT主题，所以想记录一下我对nexT简单基础配置 hexo最常用的命令 hexo s:启动本地服务器，用于预览主题,预览的同时可以修改文章内容或主题代码，保存后刷新页面即可,对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果hexo g:生成网站静态文件到默认设置的 public 文件夹。便于查看网站生成的静态文件或者手动部署网站； hexo d:自动生成网站静态文件，并部署到设定的仓库。hexo clean:清除缓存文件 db.json 和已生成的静态文件 public 。 ####### 每次修改后都要在博客所在文件夹右键 Git bush Here输入 hexo s 预览效果，如果效果合适，再输入hexo g hexo d 发布到设定的github仓库如果失败可以尝试 hexo clean 再进行重复操作 nexT配置优化1 启用主题打开所在博客所在文件夹的站点配置文件_config.yml,找到字段theme将theme后面改成，next（注意下载的next主题的文件名一定也是next否则theme后面写next不生效） 2 将next主题的文字改成中文我们进入博客所在文件夹-&gt;themes-&gt;next-&gt;lauguages我们可以发现这里面有好多YML文件，官方文档给的是中文改成zh-Hans.但是我当时改完之后发现好像变成了德语，后来查阅这个laguages文件才发现，简体中文对应的是zh-CN明确语言之后我们再次进入站点配置文件_config.yml 找到laguages字段 冒号后面写zh-CN 3 增加标签页和分类页 进入next里找到主题的配置文件，找到关键字menu 在menu下tags和categories前面的# 去掉]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>nexT配置优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[苍糜]]></title>
    <url>%2F2019%2F08%2F27%2F%E8%8B%8D%E7%B3%9C%2F</url>
    <content type="text"><![CDATA[这是 H1 列表1 列表2 a 子列表 b 子列表 列表3 ca 字体是斜线的 字体是加粗的 &lt;html&gt;&lt;/html&gt; 1234&lt;html&gt;&lt;/html&gt;&lt;html&gt;&lt;/html&gt;&lt;html&gt;&lt;/html&gt;&lt;html&gt;&lt;/html&gt; 引用]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F21%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. hello hexoCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
